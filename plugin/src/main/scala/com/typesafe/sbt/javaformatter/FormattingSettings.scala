/*
 * Copyright 2016 Lightbend Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.typesafe.sbt.javaformatter

import sbt.SettingKey

class FormattingSettings {

  final case class InsertOrNot(value: Boolean) {
    override def toString = if (value) "insert" else "do not insert"
  }

  object InsertOrNot {
    implicit def fromBoolean(b: Boolean): InsertOrNot = InsertOrNot(b)
  }

  import InsertOrNot._

  val DEFAULT_DISABLING_TAG = "@formatter:off".toCharArray
  val DEFAULT_ENABLING_TAG = "@formatter:on".toCharArray

  val alignment_for_arguments_in_allocation_expression = SettingKey[Int]("alignment_for_arguments_in_allocation_expression", "")
  val alignment_for_arguments_in_annotation = SettingKey[Int]("alignment_for_arguments_in_annotation", "")
  val alignment_for_arguments_in_enum_constant = SettingKey[Int]("alignment_for_arguments_in_enum_constant", "")
  val alignment_for_arguments_in_explicit_constructor_call = SettingKey[Int]("alignment_for_arguments_in_explicit_constructor_call", "")
  val alignment_for_arguments_in_method_invocation = SettingKey[Int]("alignment_for_arguments_in_method_invocation", "")
  val alignment_for_arguments_in_qualified_allocation_expression = SettingKey[Int]("alignment_for_arguments_in_qualified_allocation_expression", "")
  val alignment_for_assignment = SettingKey[Int]("alignment_for_assignment", "")
  val alignment_for_binary_expression = SettingKey[Int]("alignment_for_binary_expression", "")
  val alignment_for_compact_if = SettingKey[Int]("alignment_for_compact_if", "")
  val alignment_for_conditional_expression = SettingKey[Int]("alignment_for_conditional_expression", "")
  val alignment_for_enum_constants = SettingKey[Int]("alignment_for_enum_constants", "")
  val alignment_for_expressions_in_array_initializer = SettingKey[Int]("alignment_for_expressions_in_array_initializer", "")
  val alignment_for_method_declaration = SettingKey[Int]("alignment_for_method_declaration", "")
  val alignment_for_multiple_fields = SettingKey[Int]("alignment_for_multiple_fields", "")
  val alignment_for_parameters_in_constructor_declaration = SettingKey[Int]("alignment_for_parameters_in_constructor_declaration", "")
  val alignment_for_parameters_in_method_declaration = SettingKey[Int]("alignment_for_parameters_in_method_declaration", "")
  val alignment_for_selector_in_method_invocation = SettingKey[Int]("alignment_for_selector_in_method_invocation", "")
  val alignment_for_superclass_in_type_declaration = SettingKey[Int]("alignment_for_superclass_in_type_declaration", "")
  val alignment_for_superinterfaces_in_enum_declaration = SettingKey[Int]("alignment_for_superinterfaces_in_enum_declaration", "")
  val alignment_for_superinterfaces_in_type_declaration = SettingKey[Int]("alignment_for_superinterfaces_in_type_declaration", "")
  val alignment_for_throws_clause_in_constructor_declaration = SettingKey[Int]("alignment_for_throws_clause_in_constructor_declaration", "")
  val alignment_for_throws_clause_in_method_declaration = SettingKey[Int]("alignment_for_throws_clause_in_method_declaration", "")
  val alignment_for_resources_in_try = SettingKey[Int]("alignment_for_resources_in_try", "")
  val alignment_for_union_type_in_multicatch = SettingKey[Int]("alignment_for_union_type_in_multicatch", "")
  val align_type_members_on_columns = SettingKey[Boolean]("align_type_members_on_columns", "")
  val brace_position_for_annotation_type_declaration = SettingKey[String]("brace_position_for_annotation_type_declaration", "")
  val brace_position_for_anonymous_type_declaration = SettingKey[String]("brace_position_for_anonymous_type_declaration", "")
  val brace_position_for_array_initializer = SettingKey[String]("brace_position_for_array_initializer", "")
  val brace_position_for_block = SettingKey[String]("brace_position_for_block", "")
  val brace_position_for_block_in_case = SettingKey[String]("brace_position_for_block_in_case", "")
  val brace_position_for_constructor_declaration = SettingKey[String]("brace_position_for_constructor_declaration", "")
  val brace_position_for_enum_constant = SettingKey[String]("brace_position_for_enum_constant", "")
  val brace_position_for_enum_declaration = SettingKey[String]("brace_position_for_enum_declaration", "")
  val brace_position_for_lambda_body = SettingKey[String]("brace_position_for_lambda_body", "")
  val brace_position_for_method_declaration = SettingKey[String]("brace_position_for_method_declaration", "")
  val brace_position_for_type_declaration = SettingKey[String]("brace_position_for_type_declaration", "")
  val brace_position_for_switch = SettingKey[String]("brace_position_for_switch", "")
  val continuation_indentation = SettingKey[Int]("continuation_indentation", "")
  val continuation_indentation_for_array_initializer = SettingKey[Int]("continuation_indentation_for_array_initializer", "")
  val blank_lines_after_imports = SettingKey[Int]("blank_lines_after_imports", "")
  val blank_lines_after_package = SettingKey[Int]("blank_lines_after_package", "")
  val blank_lines_before_field = SettingKey[Int]("blank_lines_before_field", "")
  val blank_lines_before_first_class_body_declaration = SettingKey[Int]("blank_lines_before_first_class_body_declaration", "")
  val blank_lines_before_imports = SettingKey[Int]("blank_lines_before_imports", "")
  val blank_lines_before_member_type = SettingKey[Int]("blank_lines_before_member_type", "")
  val blank_lines_before_method = SettingKey[Int]("blank_lines_before_method", "")
  val blank_lines_before_new_chunk = SettingKey[Int]("blank_lines_before_new_chunk", "")
  val blank_lines_before_package = SettingKey[Int]("blank_lines_before_package", "")
  val blank_lines_between_import_groups = SettingKey[Int]("blank_lines_between_import_groups", "")
  val blank_lines_between_type_declarations = SettingKey[Int]("blank_lines_between_type_declarations", "")
  val blank_lines_at_beginning_of_method_body = SettingKey[Int]("blank_lines_at_beginning_of_method_body", "")
  val comment_clear_blank_lines_in_javadoc_comment = SettingKey[Boolean]("comment_clear_blank_lines_in_javadoc_comment", "")
  val comment_clear_blank_lines_in_block_comment = SettingKey[Boolean]("comment_clear_blank_lines_in_block_comment", "")
  val comment_new_lines_at_block_boundaries = SettingKey[Boolean]("comment_new_lines_at_block_boundaries", "")
  val comment_new_lines_at_javadoc_boundaries = SettingKey[Boolean]("comment_new_lines_at_javadoc_boundaries", "")
  val comment_format_javadoc_comment = SettingKey[Boolean]("comment_format_javadoc_comment", "")
  val comment_format_line_comment = SettingKey[Boolean]("comment_format_line_comment", "")
  val comment_format_line_comment_starting_on_first_column = SettingKey[Boolean]("comment_format_line_comment_starting_on_first_column", "")
  val comment_format_block_comment = SettingKey[Boolean]("comment_format_block_comment", "")
  val comment_format_header = SettingKey[Boolean]("comment.format_header", "")
  val comment_format_html = SettingKey[Boolean]("comment_format_html", "")
  val comment_format_source = SettingKey[Boolean]("comment_format_source", "")
  val comment_indent_parameter_description = SettingKey[InsertOrNot]("comment_indent_parameter_description", "")
  val comment_indent_root_tags = SettingKey[InsertOrNot]("comment_indent_root_tags", "")
  val comment_insert_empty_line_before_root_tags = SettingKey[InsertOrNot]("comment_insert_empty_line_before_root_tags", "")
  val comment_insert_new_line_for_parameter = SettingKey[InsertOrNot]("comment_insert_new_line_for_parameter", "")
  val comment_preserve_white_space_between_code_and_line_comments = SettingKey[InsertOrNot]("comment_preserve_white_space_between_code_and_line_comments", "")
  val comment_line_length = SettingKey[Int]("comment_line_length", "")
  val use_tags = SettingKey[InsertOrNot]("use_tags", "")
  val disabling_tag = SettingKey[Array[Char]]("disabling_tag", "")
  val enabling_tag = SettingKey[Array[Char]]("enabling_tag", "")
  val indent_statements_compare_to_block = SettingKey[Boolean]("indent_statements_compare_to_block", "")
  val indent_statements_compare_to_body = SettingKey[Boolean]("indent_statements_compare_to_body", "")
  val indent_body_declarations_compare_to_annotation_declaration_header = SettingKey[Boolean]("indent_body_declarations_compare_to_annotation_declaration_header", "")
  val indent_body_declarations_compare_to_enum_constant_header = SettingKey[Boolean]("indent_body_declarations_compare_to_enum_constant_header", "")
  val indent_body_declarations_compare_to_enum_declaration_header = SettingKey[Boolean]("indent_body_declarations_compare_to_enum_declaration_header", "")
  val indent_body_declarations_compare_to_type_header = SettingKey[Boolean]("indent_body_declarations_compare_to_type_header", "")
  val indent_breaks_compare_to_cases = SettingKey[Boolean]("indent_breaks_compare_to_cases", "")
  val indent_empty_lines = SettingKey[Boolean]("indent_empty_lines", "")
  val indent_switchstatements_compare_to_cases = SettingKey[Boolean]("indent_switchstatements_compare_to_cases", "")
  val indent_switchstatements_compare_to_switch = SettingKey[Boolean]("indent_switchstatements_compare_to_switch", "")
  val indentation_size = SettingKey[Int]("indentation.size", "")
  val indentation_char = SettingKey[String]("indentation.char", "")
  val line_split = SettingKey[Int]("lineSplit", "")
  val insert_new_line_after_annotation_on_type = SettingKey[InsertOrNot]("insert_new_line_after_annotation_on_type", "")
  val insert_new_line_after_type_annotation = SettingKey[InsertOrNot]("insert_new_line_after_type_annotation", "")
  val insert_new_line_after_annotation_on_field = SettingKey[InsertOrNot]("insert_new_line_after_annotation_on_field", "")
  val insert_new_line_after_annotation_on_method = SettingKey[InsertOrNot]("insert_new_line_after_annotation_on_method", "")
  val insert_new_line_after_annotation_on_package = SettingKey[InsertOrNot]("insert_new_line_after_annotation_on_package", "")
  val insert_new_line_after_annotation_on_parameter = SettingKey[InsertOrNot]("insert_new_line_after_annotation_on_parameter", "")
  val insert_new_line_after_annotation_on_local_variable = SettingKey[InsertOrNot]("insert_new_line_after_annotation_on_local_variable", "")
  val insert_new_line_after_label = SettingKey[InsertOrNot]("insert_new_line_after_label", "")
  val insert_new_line_after_opening_brace_in_array_initializer = SettingKey[InsertOrNot]("insert_new_line_after_opening_brace_in_array_initializer", "")
  val insert_new_line_at_end_of_file_if_missing = SettingKey[InsertOrNot]("insert_new_line_at_end_of_file_if_missing", "")
  val insert_new_line_before_catch_in_try_statement = SettingKey[InsertOrNot]("insert_new_line_before_catch_in_try_statement", "")
  val insert_new_line_before_closing_brace_in_array_initializer = SettingKey[InsertOrNot]("insert_new_line_before_closing_brace_in_array_initializer", "")
  val insert_new_line_before_else_in_if_statement = SettingKey[InsertOrNot]("insert_new_line_before_else_in_if_statement", "")
  val insert_new_line_before_finally_in_try_statement = SettingKey[InsertOrNot]("insert_new_line_before_finally_in_try_statement", "")
  val insert_new_line_before_while_in_do_statement = SettingKey[InsertOrNot]("insert_new_line_before_while_in_do_statement", "")
  val insert_new_line_in_empty_anonymous_type_declaration = SettingKey[InsertOrNot]("insert_new_line_in_empty_anonymous_type_declaration", "")
  val insert_new_line_in_empty_block = SettingKey[InsertOrNot]("insert_new_line_in_empty_block", "")
  val insert_new_line_in_empty_annotation_declaration = SettingKey[InsertOrNot]("insert_new_line_in_empty_annotation_declaration", "")
  val insert_new_line_in_empty_enum_constant = SettingKey[InsertOrNot]("insert_new_line_in_empty_enum_constant", "")
  val insert_new_line_in_empty_enum_declaration = SettingKey[InsertOrNot]("insert_new_line_in_empty_enum_declaration", "")
  val insert_new_line_in_empty_method_body = SettingKey[InsertOrNot]("insert_new_line_in_empty_method_body", "")
  val insert_new_line_in_empty_type_declaration = SettingKey[InsertOrNot]("insert_new_line_in_empty_type_declaration", "")
  val insert_space_after_and_in_type_parameter = SettingKey[InsertOrNot]("insert_space_after_and_in_type_parameter", "")
  val insert_space_after_assignment_operator = SettingKey[InsertOrNot]("insert_space_after_assignment_operator", "")
  val insert_space_after_at_in_annotation = SettingKey[InsertOrNot]("insert_space_after_at_in_annotation", "")
  val insert_space_after_at_in_annotation_type_declaration = SettingKey[InsertOrNot]("insert_space_after_at_in_annotation_type_declaration", "")
  val insert_space_after_binary_operator = SettingKey[InsertOrNot]("insert_space_after_binary_operator", "")
  val insert_space_after_closing_angle_bracket_in_type_arguments = SettingKey[InsertOrNot]("insert_space_after_closing_angle_bracket_in_type_arguments", "")
  val insert_space_after_closing_angle_bracket_in_type_parameters = SettingKey[InsertOrNot]("insert_space_after_closing_angle_bracket_in_type_parameters", "")
  val insert_space_after_closing_paren_in_cast = SettingKey[InsertOrNot]("insert_space_after_closing_paren_in_cast", "")
  val insert_space_after_closing_brace_in_block = SettingKey[InsertOrNot]("insert_space_after_closing_brace_in_block", "")
  val insert_space_after_colon_in_assert = SettingKey[InsertOrNot]("insert_space_after_colon_in_assert", "")
  val insert_space_after_colon_in_case = SettingKey[InsertOrNot]("insert_space_after_colon_in_case", "")
  val insert_space_after_colon_in_conditional = SettingKey[InsertOrNot]("insert_space_after_colon_in_conditional", "")
  val insert_space_after_colon_in_for = SettingKey[InsertOrNot]("insert_space_after_colon_in_for", "")
  val insert_space_after_colon_in_labeled_statement = SettingKey[InsertOrNot]("insert_space_after_colon_in_labeled_statement", "")
  val insert_space_after_comma_in_allocation_expression = SettingKey[InsertOrNot]("insert_space_after_comma_in_allocation_expression", "")
  val insert_space_after_comma_in_annotation = SettingKey[InsertOrNot]("insert_space_after_comma_in_annotation", "")
  val insert_space_after_comma_in_array_initializer = SettingKey[InsertOrNot]("insert_space_after_comma_in_array_initializer", "")
  val insert_space_after_comma_in_constructor_declaration_parameters = SettingKey[InsertOrNot]("insert_space_after_comma_in_constructor_declaration_parameters", "")
  val insert_space_after_comma_in_constructor_declaration_throws = SettingKey[InsertOrNot]("insert_space_after_comma_in_constructor_declaration_throws", "")
  val insert_space_after_comma_in_enum_constant_arguments = SettingKey[InsertOrNot]("insert_space_after_comma_in_enum_constant_arguments", "")
  val insert_space_after_comma_in_enum_declarations = SettingKey[InsertOrNot]("insert_space_after_comma_in_enum_declarations", "")
  val insert_space_after_comma_in_explicit_constructor_call_arguments = SettingKey[InsertOrNot]("insert_space_after_comma_in_explicit_constructor_call_arguments", "")
  val insert_space_after_comma_in_for_increments = SettingKey[InsertOrNot]("insert_space_after_comma_in_for_increments", "")
  val insert_space_after_comma_in_for_inits = SettingKey[InsertOrNot]("insert_space_after_comma_in_for_inits", "")
  val insert_space_after_comma_in_method_invocation_arguments = SettingKey[InsertOrNot]("insert_space_after_comma_in_method_invocation_arguments", "")
  val insert_space_after_comma_in_method_declaration_parameters = SettingKey[InsertOrNot]("insert_space_after_comma_in_method_declaration_parameters", "")
  val insert_space_after_comma_in_method_declaration_throws = SettingKey[InsertOrNot]("insert_space_after_comma_in_method_declaration_throws", "")
  val insert_space_after_comma_in_multiple_field_declarations = SettingKey[InsertOrNot]("insert_space_after_comma_in_multiple_field_declarations", "")
  val insert_space_after_comma_in_multiple_local_declarations = SettingKey[InsertOrNot]("insert_space_after_comma_in_multiple_local_declarations", "")
  val insert_space_after_comma_in_parameterized_type_reference = SettingKey[InsertOrNot]("insert_space_after_comma_in_parameterized_type_reference", "")
  val insert_space_after_comma_in_superinterfaces = SettingKey[InsertOrNot]("insert_space_after_comma_in_superinterfaces", "")
  val insert_space_after_comma_in_type_arguments = SettingKey[InsertOrNot]("insert_space_after_comma_in_type_arguments", "")
  val insert_space_after_comma_in_type_parameters = SettingKey[InsertOrNot]("insert_space_after_comma_in_type_parameters", "")
  val insert_space_after_ellipsis = SettingKey[InsertOrNot]("insert_space_after_ellipsis", "")
  val insert_space_after_lambda_arrow = SettingKey[InsertOrNot]("insert_space_after_lambda_arrow", "")
  val insert_space_after_opening_angle_bracket_in_parameterized_type_reference = SettingKey[InsertOrNot]("insert_space_after_opening_angle_bracket_in_parameterized_type_reference", "")
  val insert_space_after_opening_angle_bracket_in_type_arguments = SettingKey[InsertOrNot]("insert_space_after_opening_angle_bracket_in_type_arguments", "")
  val insert_space_after_opening_angle_bracket_in_type_parameters = SettingKey[InsertOrNot]("insert_space_after_opening_angle_bracket_in_type_parameters", "")
  val insert_space_after_opening_bracket_in_array_allocation_expression = SettingKey[InsertOrNot]("insert_space_after_opening_bracket_in_array_allocation_expression", "")
  val insert_space_after_opening_bracket_in_array_reference = SettingKey[InsertOrNot]("insert_space_after_opening_bracket_in_array_reference", "")
  val insert_space_after_opening_brace_in_array_initializer = SettingKey[InsertOrNot]("insert_space_after_opening_brace_in_array_initializer", "")
  val insert_space_after_opening_paren_in_annotation = SettingKey[InsertOrNot]("insert_space_after_opening_paren_in_annotation", "")
  val insert_space_after_opening_paren_in_cast = SettingKey[InsertOrNot]("insert_space_after_opening_paren_in_cast", "")
  val insert_space_after_opening_paren_in_catch = SettingKey[InsertOrNot]("insert_space_after_opening_paren_in_catch", "")
  val insert_space_after_opening_paren_in_constructor_declaration = SettingKey[InsertOrNot]("insert_space_after_opening_paren_in_constructor_declaration", "")
  val insert_space_after_opening_paren_in_enum_constant = SettingKey[InsertOrNot]("insert_space_after_opening_paren_in_enum_constant", "")
  val insert_space_after_opening_paren_in_for = SettingKey[InsertOrNot]("insert_space_after_opening_paren_in_for", "")
  val insert_space_after_opening_paren_in_if = SettingKey[InsertOrNot]("insert_space_after_opening_paren_in_if", "")
  val insert_space_after_opening_paren_in_method_declaration = SettingKey[InsertOrNot]("insert_space_after_opening_paren_in_method_declaration", "")
  val insert_space_after_opening_paren_in_method_invocation = SettingKey[InsertOrNot]("insert_space_after_opening_paren_in_method_invocation", "")
  val insert_space_after_opening_paren_in_parenthesized_expression = SettingKey[InsertOrNot]("insert_space_after_opening_paren_in_parenthesized_expression", "")
  val insert_space_after_opening_paren_in_switch = SettingKey[InsertOrNot]("insert_space_after_opening_paren_in_switch", "")
  val insert_space_after_opening_paren_in_synchronized = SettingKey[InsertOrNot]("insert_space_after_opening_paren_in_synchronized", "")
  val insert_space_after_opening_paren_in_try = SettingKey[InsertOrNot]("insert_space_after_opening_paren_in_try", "")
  val insert_space_after_opening_paren_in_while = SettingKey[InsertOrNot]("insert_space_after_opening_paren_in_while", "")
  val insert_space_after_postfix_operator = SettingKey[InsertOrNot]("insert_space_after_postfix_operator", "")
  val insert_space_after_prefix_operator = SettingKey[InsertOrNot]("insert_space_after_prefix_operator", "")
  val insert_space_after_question_in_conditional = SettingKey[InsertOrNot]("insert_space_after_question_in_conditional", "")
  val insert_space_after_question_in_wilcard = SettingKey[InsertOrNot]("insert_space_after_question_in_wilcard", "")
  val insert_space_after_semicolon_in_for = SettingKey[InsertOrNot]("insert_space_after_semicolon_in_for", "")
  val insert_space_after_semicolon_in_try_resources = SettingKey[InsertOrNot]("insert_space_after_semicolon_in_try_resources", "")
  val insert_space_after_unary_operator = SettingKey[InsertOrNot]("insert_space_after_unary_operator", "")
  val insert_space_before_and_in_type_parameter = SettingKey[InsertOrNot]("insert_space_before_and_in_type_parameter", "")
  val insert_space_before_at_in_annotation_type_declaration = SettingKey[InsertOrNot]("insert_space_before_at_in_annotation_type_declaration", "")
  val insert_space_before_assignment_operator = SettingKey[InsertOrNot]("insert_space_before_assignment_operator", "")
  val insert_space_before_binary_operator = SettingKey[InsertOrNot]("insert_space_before_binary_operator", "")
  val insert_space_before_closing_angle_bracket_in_parameterized_type_reference = SettingKey[InsertOrNot]("insert_space_before_closing_angle_bracket_in_parameterized_type_reference", "")
  val insert_space_before_closing_angle_bracket_in_type_arguments = SettingKey[InsertOrNot]("insert_space_before_closing_angle_bracket_in_type_arguments", "")
  val insert_space_before_closing_angle_bracket_in_type_parameters = SettingKey[InsertOrNot]("insert_space_before_closing_angle_bracket_in_type_parameters", "")
  val insert_space_before_closing_brace_in_array_initializer = SettingKey[InsertOrNot]("insert_space_before_closing_brace_in_array_initializer", "")
  val insert_space_before_closing_bracket_in_array_allocation_expression = SettingKey[InsertOrNot]("insert_space_before_closing_bracket_in_array_allocation_expression", "")
  val insert_space_before_closing_bracket_in_array_reference = SettingKey[InsertOrNot]("insert_space_before_closing_bracket_in_array_reference", "")
  val insert_space_before_closing_paren_in_annotation = SettingKey[InsertOrNot]("insert_space_before_closing_paren_in_annotation", "")
  val insert_space_before_closing_paren_in_cast = SettingKey[InsertOrNot]("insert_space_before_closing_paren_in_cast", "")
  val insert_space_before_closing_paren_in_catch = SettingKey[InsertOrNot]("insert_space_before_closing_paren_in_catch", "")
  val insert_space_before_closing_paren_in_constructor_declaration = SettingKey[InsertOrNot]("insert_space_before_closing_paren_in_constructor_declaration", "")
  val insert_space_before_closing_paren_in_enum_constant = SettingKey[InsertOrNot]("insert_space_before_closing_paren_in_enum_constant", "")
  val insert_space_before_closing_paren_in_for = SettingKey[InsertOrNot]("insert_space_before_closing_paren_in_for", "")
  val insert_space_before_closing_paren_in_if = SettingKey[InsertOrNot]("insert_space_before_closing_paren_in_if", "")
  val insert_space_before_closing_paren_in_method_declaration = SettingKey[InsertOrNot]("insert_space_before_closing_paren_in_method_declaration", "")
  val insert_space_before_closing_paren_in_method_invocation = SettingKey[InsertOrNot]("insert_space_before_closing_paren_in_method_invocation", "")
  val insert_space_before_closing_paren_in_parenthesized_expression = SettingKey[InsertOrNot]("insert_space_before_closing_paren_in_parenthesized_expression", "")
  val insert_space_before_closing_paren_in_switch = SettingKey[InsertOrNot]("insert_space_before_closing_paren_in_switch", "")
  val insert_space_before_closing_paren_in_synchronized = SettingKey[InsertOrNot]("insert_space_before_closing_paren_in_synchronized", "")
  val insert_space_before_closing_paren_in_try = SettingKey[InsertOrNot]("insert_space_before_closing_paren_in_try", "")
  val insert_space_before_closing_paren_in_while = SettingKey[InsertOrNot]("insert_space_before_closing_paren_in_while", "")
  val insert_space_before_colon_in_assert = SettingKey[InsertOrNot]("insert_space_before_colon_in_assert", "")
  val insert_space_before_colon_in_case = SettingKey[InsertOrNot]("insert_space_before_colon_in_case", "")
  val insert_space_before_colon_in_conditional = SettingKey[InsertOrNot]("insert_space_before_colon_in_conditional", "")
  val insert_space_before_colon_in_default = SettingKey[InsertOrNot]("insert_space_before_colon_in_default", "")
  val insert_space_before_colon_in_for = SettingKey[InsertOrNot]("insert_space_before_colon_in_for", "")
  val insert_space_before_colon_in_labeled_statement = SettingKey[InsertOrNot]("insert_space_before_colon_in_labeled_statement", "")
  val insert_space_before_comma_in_allocation_expression = SettingKey[InsertOrNot]("insert_space_before_comma_in_allocation_expression", "")
  val insert_space_before_comma_in_annotation = SettingKey[InsertOrNot]("insert_space_before_comma_in_annotation", "")
  val insert_space_before_comma_in_array_initializer = SettingKey[InsertOrNot]("insert_space_before_comma_in_array_initializer", "")
  val insert_space_before_comma_in_constructor_declaration_parameters = SettingKey[InsertOrNot]("insert_space_before_comma_in_constructor_declaration_parameters", "")
  val insert_space_before_comma_in_constructor_declaration_throws = SettingKey[InsertOrNot]("insert_space_before_comma_in_constructor_declaration_throws", "")
  val insert_space_before_comma_in_enum_constant_arguments = SettingKey[InsertOrNot]("insert_space_before_comma_in_enum_constant_arguments", "")
  val insert_space_before_comma_in_enum_declarations = SettingKey[InsertOrNot]("insert_space_before_comma_in_enum_declarations", "")
  val insert_space_before_comma_in_explicit_constructor_call_arguments = SettingKey[InsertOrNot]("insert_space_before_comma_in_explicit_constructor_call_arguments", "")
  val insert_space_before_comma_in_for_increments = SettingKey[InsertOrNot]("insert_space_before_comma_in_for_increments", "")
  val insert_space_before_comma_in_for_inits = SettingKey[InsertOrNot]("insert_space_before_comma_in_for_inits", "")
  val insert_space_before_comma_in_method_invocation_arguments = SettingKey[InsertOrNot]("insert_space_before_comma_in_method_invocation_arguments", "")
  val insert_space_before_comma_in_method_declaration_parameters = SettingKey[InsertOrNot]("insert_space_before_comma_in_method_declaration_parameters", "")
  val insert_space_before_comma_in_method_declaration_throws = SettingKey[InsertOrNot]("insert_space_before_comma_in_method_declaration_throws", "")
  val insert_space_before_comma_in_multiple_field_declarations = SettingKey[InsertOrNot]("insert_space_before_comma_in_multiple_field_declarations", "")
  val insert_space_before_comma_in_multiple_local_declarations = SettingKey[InsertOrNot]("insert_space_before_comma_in_multiple_local_declarations", "")
  val insert_space_before_comma_in_parameterized_type_reference = SettingKey[InsertOrNot]("insert_space_before_comma_in_parameterized_type_reference", "")
  val insert_space_before_comma_in_superinterfaces = SettingKey[InsertOrNot]("insert_space_before_comma_in_superinterfaces", "")
  val insert_space_before_comma_in_type_arguments = SettingKey[InsertOrNot]("insert_space_before_comma_in_type_arguments", "")
  val insert_space_before_comma_in_type_parameters = SettingKey[InsertOrNot]("insert_space_before_comma_in_type_parameters", "")
  val insert_space_before_ellipsis = SettingKey[InsertOrNot]("insert_space_before_ellipsis", "")
  val insert_space_before_lambda_arrow = SettingKey[InsertOrNot]("insert_space_before_lambda_arrow", "")
  val insert_space_before_parenthesized_expression_in_return = SettingKey[InsertOrNot]("insert_space_before_parenthesized_expression_in_return", "")
  val insert_space_before_parenthesized_expression_in_throw = SettingKey[InsertOrNot]("insert_space_before_parenthesized_expression_in_throw", "")
  val insert_space_before_question_in_wilcard = SettingKey[InsertOrNot]("insert_space_before_question_in_wilcard", "")
  val insert_space_before_opening_angle_bracket_in_parameterized_type_reference = SettingKey[InsertOrNot]("insert_space_before_opening_angle_bracket_in_parameterized_type_reference", "")
  val insert_space_before_opening_angle_bracket_in_type_arguments = SettingKey[InsertOrNot]("insert_space_before_opening_angle_bracket_in_type_arguments", "")
  val insert_space_before_opening_angle_bracket_in_type_parameters = SettingKey[InsertOrNot]("insert_space_before_opening_angle_bracket_in_type_parameters", "")
  val insert_space_before_opening_brace_in_annotation_type_declaration = SettingKey[InsertOrNot]("insert_space_before_opening_brace_in_annotation_type_declaration", "")
  val insert_space_before_opening_brace_in_anonymous_type_declaration = SettingKey[InsertOrNot]("insert_space_before_opening_brace_in_anonymous_type_declaration", "")
  val insert_space_before_opening_brace_in_array_initializer = SettingKey[InsertOrNot]("insert_space_before_opening_brace_in_array_initializer", "")
  val insert_space_before_opening_brace_in_block = SettingKey[InsertOrNot]("insert_space_before_opening_brace_in_block", "")
  val insert_space_before_opening_brace_in_constructor_declaration = SettingKey[InsertOrNot]("insert_space_before_opening_brace_in_constructor_declaration", "")
  val insert_space_before_opening_brace_in_enum_constant = SettingKey[InsertOrNot]("insert_space_before_opening_brace_in_enum_constant", "")
  val insert_space_before_opening_brace_in_enum_declaration = SettingKey[InsertOrNot]("insert_space_before_opening_brace_in_enum_declaration", "")
  val insert_space_before_opening_brace_in_method_declaration = SettingKey[InsertOrNot]("insert_space_before_opening_brace_in_method_declaration", "")
  val insert_space_before_opening_brace_in_type_declaration = SettingKey[InsertOrNot]("insert_space_before_opening_brace_in_type_declaration", "")
  val insert_space_before_opening_bracket_in_array_allocation_expression = SettingKey[InsertOrNot]("insert_space_before_opening_bracket_in_array_allocation_expression", "")
  val insert_space_before_opening_bracket_in_array_reference = SettingKey[InsertOrNot]("insert_space_before_opening_bracket_in_array_reference", "")
  val insert_space_before_opening_bracket_in_array_type_reference = SettingKey[InsertOrNot]("insert_space_before_opening_bracket_in_array_type_reference", "")
  val insert_space_before_opening_paren_in_annotation = SettingKey[InsertOrNot]("insert_space_before_opening_paren_in_annotation", "")
  val insert_space_before_opening_paren_in_annotation_type_member_declaration = SettingKey[InsertOrNot]("insert_space_before_opening_paren_in_annotation_type_member_declaration", "")
  val insert_space_before_opening_paren_in_catch = SettingKey[InsertOrNot]("insert_space_before_opening_paren_in_catch", "")
  val insert_space_before_opening_paren_in_constructor_declaration = SettingKey[InsertOrNot]("insert_space_before_opening_paren_in_constructor_declaration", "")
  val insert_space_before_opening_paren_in_enum_constant = SettingKey[InsertOrNot]("insert_space_before_opening_paren_in_enum_constant", "")
  val insert_space_before_opening_paren_in_for = SettingKey[InsertOrNot]("insert_space_before_opening_paren_in_for", "")
  val insert_space_before_opening_paren_in_if = SettingKey[InsertOrNot]("insert_space_before_opening_paren_in_if", "")
  val insert_space_before_opening_paren_in_method_invocation = SettingKey[InsertOrNot]("insert_space_before_opening_paren_in_method_invocation", "")
  val insert_space_before_opening_paren_in_method_declaration = SettingKey[InsertOrNot]("insert_space_before_opening_paren_in_method_declaration", "")
  val insert_space_before_opening_paren_in_switch = SettingKey[InsertOrNot]("insert_space_before_opening_paren_in_switch", "")
  val insert_space_before_opening_paren_in_try = SettingKey[InsertOrNot]("insert_space_before_opening_paren_in_try", "")
  val insert_space_before_opening_brace_in_switch = SettingKey[InsertOrNot]("insert_space_before_opening_brace_in_switch", "")
  val insert_space_before_opening_paren_in_synchronized = SettingKey[InsertOrNot]("insert_space_before_opening_paren_in_synchronized", "")
  val insert_space_before_opening_paren_in_parenthesized_expression = SettingKey[InsertOrNot]("insert_space_before_opening_paren_in_parenthesized_expression", "")
  val insert_space_before_opening_paren_in_while = SettingKey[InsertOrNot]("insert_space_before_opening_paren_in_while", "")
  val insert_space_before_postfix_operator = SettingKey[InsertOrNot]("insert_space_before_postfix_operator", "")
  val insert_space_before_prefix_operator = SettingKey[InsertOrNot]("insert_space_before_prefix_operator", "")
  val insert_space_before_question_in_conditional = SettingKey[InsertOrNot]("insert_space_before_question_in_conditional", "")
  val insert_space_before_semicolon = SettingKey[InsertOrNot]("insert_space_before_semicolon", "")
  val insert_space_before_semicolon_in_for = SettingKey[InsertOrNot]("insert_space_before_semicolon_in_for", "")
  val insert_space_before_semicolon_in_try_resources = SettingKey[InsertOrNot]("insert_space_before_semicolon_in_try_resources", "")
  val insert_space_before_unary_operator = SettingKey[InsertOrNot]("insert_space_before_unary_operator", "")
  val insert_space_between_brackets_in_array_type_reference = SettingKey[InsertOrNot]("insert_space_between_brackets_in_array_type_reference", "")
  val insert_space_between_empty_braces_in_array_initializer = SettingKey[InsertOrNot]("insert_space_between_empty_braces_in_array_initializer", "")
  val insert_space_between_empty_brackets_in_array_allocation_expression = SettingKey[InsertOrNot]("insert_space_between_empty_brackets_in_array_allocation_expression", "")
  val insert_space_between_empty_parens_in_annotation_type_member_declaration = SettingKey[InsertOrNot]("insert_space_between_empty_parens_in_annotation_type_member_declaration", "")
  val insert_space_between_empty_parens_in_constructor_declaration = SettingKey[InsertOrNot]("insert_space_between_empty_parens_in_constructor_declaration", "")
  val insert_space_between_empty_parens_in_enum_constant = SettingKey[InsertOrNot]("insert_space_between_empty_parens_in_enum_constant", "")
  val insert_space_between_empty_parens_in_method_declaration = SettingKey[InsertOrNot]("insert_space_between_empty_parens_in_method_declaration", "")
  val insert_space_between_empty_parens_in_method_invocation = SettingKey[InsertOrNot]("insert_space_between_empty_parens_in_method_invocation", "")
  val compact_else_if = SettingKey[Boolean]("compact_else_if", "")
  val keep_guardian_clause_on_one_line = SettingKey[Boolean]("keep_guardian_clause_on_one_line", "")
  val keep_else_statement_on_same_line = SettingKey[Boolean]("keep_else_statement_on_same_line", "")
  val keep_empty_array_initializer_on_one_line = SettingKey[Boolean]("keep_empty_array_initializer_on_one_line", "")
  val keep_simple_if_on_one_line = SettingKey[InsertOrNot]("keep_simple_if_on_one_line", "")
  val keep_then_statement_on_same_line = SettingKey[Boolean]("keep_then_statement_on_same_line", "")
  val never_indent_block_comments_on_first_column = SettingKey[InsertOrNot]("never_indent_block_comments_on_first_column", "")
  val never_indent_line_comments_on_first_column = SettingKey[InsertOrNot]("never_indent_line_comments_on_first_column", "")
  val number_of_empty_lines_to_preserve = SettingKey[Int]("number_of_empty_lines_to_preserve", "")
  val join_wrapped_lines = SettingKey[InsertOrNot]("join_wrapped_lines", "")
  val join_lines_in_comments = SettingKey[InsertOrNot]("join_lines_in_comments", "")
  val put_empty_statement_on_new_line = SettingKey[Boolean]("put_empty_statement_on_new_line", "")
  val filling_space = SettingKey[Char]("filling_space", "")
  val page_width = SettingKey[Int]("page_width", "")
  val tab_size = SettingKey[Int]("tab_size", "")
  val tab_char = SettingKey[String]("tab_char", "Use the word 'space' or 'tab' co configure the indentation character")
  val use_tabs_only_for_leading_indentations = SettingKey[Boolean]("use_tabs_only_for_leading_indentations", "")
  val wrap_before_binary_operator = SettingKey[InsertOrNot]("wrap_before_binary_operator", "")
  val wrap_before_or_operator_multicatch = SettingKey[InsertOrNot]("wrap_before_or_operator_multicatch", "")
  val wrap_outer_expressions_when_nested = SettingKey[InsertOrNot]("wrap_outer_expressions_when_nested", "")
  val initial_indentation_level = SettingKey[Int]("initial_indentation_level", "")
  val line_separator = SettingKey[String]("line_separator", "")
  val tabulation_size = SettingKey[Int]("tabulation.size", "")
  val tabulation_char = SettingKey[String]("tabulation.char", "Use the word 'space' or 'tab' co configure the indentation character")

  // -------- setting defaults ----------
  val formattingSettingsTyped = Seq(
    alignment_for_arguments_in_allocation_expression := 16,
    alignment_for_arguments_in_annotation := 16,
    alignment_for_arguments_in_enum_constant := 16,
    alignment_for_arguments_in_explicit_constructor_call := 16,
    alignment_for_arguments_in_method_invocation := 16,
    alignment_for_arguments_in_qualified_allocation_expression := 16,
    alignment_for_assignment := 16,
    alignment_for_binary_expression := 16,
    alignment_for_compact_if := 16,
    alignment_for_conditional_expression := 80,
    alignment_for_enum_constants := 16,
    alignment_for_expressions_in_array_initializer := 16,
    alignment_for_method_declaration := 16,
    alignment_for_multiple_fields := 16,
    alignment_for_parameters_in_constructor_declaration := 16,
    alignment_for_parameters_in_method_declaration := 16,
    alignment_for_selector_in_method_invocation := 16,
    alignment_for_superclass_in_type_declaration := 16,
    alignment_for_superinterfaces_in_enum_declaration := 16,
    alignment_for_superinterfaces_in_type_declaration := 16,
    alignment_for_throws_clause_in_constructor_declaration := 16,
    alignment_for_throws_clause_in_method_declaration := 16,
    alignment_for_resources_in_try := 16,
    alignment_for_union_type_in_multicatch := 16,
    align_type_members_on_columns := false,
    brace_position_for_annotation_type_declaration := "end_of_line",
    brace_position_for_anonymous_type_declaration := "end_of_line",
    brace_position_for_array_initializer := "end_of_line",
    brace_position_for_block := "end_of_line",
    brace_position_for_block_in_case := "end_of_line",
    brace_position_for_constructor_declaration := "end_of_line",
    brace_position_for_enum_constant := "end_of_line",
    brace_position_for_enum_declaration := "end_of_line",
    brace_position_for_lambda_body := "end_of_line",
    brace_position_for_method_declaration := "end_of_line",
    brace_position_for_type_declaration := "end_of_line",
    brace_position_for_switch := "end_of_line",
    continuation_indentation := 2,
    continuation_indentation_for_array_initializer := 2,
    blank_lines_after_imports := 1,
    blank_lines_after_package := 1,
    blank_lines_before_field := 1,
    blank_lines_before_first_class_body_declaration := 0,
    blank_lines_before_imports := 1,
    blank_lines_before_member_type := 1,
    blank_lines_before_method := 1,
    blank_lines_before_new_chunk := 1,
    blank_lines_before_package := 0,
    blank_lines_between_import_groups := 0,
    blank_lines_between_type_declarations := 1,
    blank_lines_at_beginning_of_method_body := 0,
    comment_clear_blank_lines_in_javadoc_comment := false,
    comment_clear_blank_lines_in_block_comment := false,
    comment_new_lines_at_block_boundaries := false,
    comment_new_lines_at_javadoc_boundaries := false,
    comment_format_javadoc_comment := false,
    comment_format_line_comment := false,
    comment_format_line_comment_starting_on_first_column := false,
    comment_format_block_comment := false,
    comment_format_header := false,
    comment_format_html := false,
    comment_format_source := false,
    comment_indent_parameter_description := false,
    comment_indent_root_tags := false,
    comment_insert_empty_line_before_root_tags := false,
    comment_insert_new_line_for_parameter := false,
    comment_preserve_white_space_between_code_and_line_comments := false,
    comment_line_length := 0,
    use_tags := false,
    disabling_tag := DEFAULT_DISABLING_TAG,
    enabling_tag := DEFAULT_ENABLING_TAG,
    indent_statements_compare_to_block := false,
    indent_statements_compare_to_body := false,
    indent_body_declarations_compare_to_annotation_declaration_header := false,
    indent_body_declarations_compare_to_enum_constant_header := false,
    indent_body_declarations_compare_to_enum_declaration_header := false,
    indent_body_declarations_compare_to_type_header := false,
    indent_breaks_compare_to_cases := false,
    indent_empty_lines := true,
    indent_switchstatements_compare_to_cases := false,
    indent_switchstatements_compare_to_switch := false,
    indentation_size := 4,
    indentation_char := "space",
    line_split := 120,
    insert_new_line_after_annotation_on_type := false,
    insert_new_line_after_type_annotation := false,
    insert_new_line_after_annotation_on_field := false,
    insert_new_line_after_annotation_on_method := false,
    insert_new_line_after_annotation_on_package := false,
    insert_new_line_after_annotation_on_parameter := false,
    insert_new_line_after_annotation_on_local_variable := false,
    insert_new_line_after_label := false,
    insert_new_line_after_opening_brace_in_array_initializer := false,
    insert_new_line_at_end_of_file_if_missing := false,
    insert_new_line_before_catch_in_try_statement := false,
    insert_new_line_before_closing_brace_in_array_initializer := false,
    insert_new_line_before_else_in_if_statement := false,
    insert_new_line_before_finally_in_try_statement := false,
    insert_new_line_before_while_in_do_statement := false,
    insert_new_line_in_empty_anonymous_type_declaration := false,
    insert_new_line_in_empty_block := false,
    insert_new_line_in_empty_annotation_declaration := false,
    insert_new_line_in_empty_enum_constant := false,
    insert_new_line_in_empty_enum_declaration := false,
    insert_new_line_in_empty_method_body := false,
    insert_new_line_in_empty_type_declaration := false,
    insert_space_after_and_in_type_parameter := false,
    insert_space_after_assignment_operator := true,
    insert_space_after_at_in_annotation := false,
    insert_space_after_at_in_annotation_type_declaration := false,
    insert_space_after_binary_operator := false,
    insert_space_after_closing_angle_bracket_in_type_arguments := false,
    insert_space_after_closing_angle_bracket_in_type_parameters := false,
    insert_space_after_closing_paren_in_cast := true,
    insert_space_after_closing_brace_in_block := false,
    insert_space_after_colon_in_assert := false,
    insert_space_after_colon_in_case := false,
    insert_space_after_colon_in_conditional := false,
    insert_space_after_colon_in_for := true,
    insert_space_after_colon_in_labeled_statement := false,
    insert_space_after_comma_in_allocation_expression := false,
    insert_space_after_comma_in_annotation := false,
    insert_space_after_comma_in_array_initializer := false,
    insert_space_after_comma_in_constructor_declaration_parameters := false,
    insert_space_after_comma_in_constructor_declaration_throws := false,
    insert_space_after_comma_in_enum_constant_arguments := false,
    insert_space_after_comma_in_enum_declarations := false,
    insert_space_after_comma_in_explicit_constructor_call_arguments := false,
    insert_space_after_comma_in_for_increments := false,
    insert_space_after_comma_in_for_inits := false,
    insert_space_after_comma_in_method_invocation_arguments := false,
    insert_space_after_comma_in_method_declaration_parameters := false,
    insert_space_after_comma_in_method_declaration_throws := false,
    insert_space_after_comma_in_multiple_field_declarations := false,
    insert_space_after_comma_in_multiple_local_declarations := false,
    insert_space_after_comma_in_parameterized_type_reference := false,
    insert_space_after_comma_in_superinterfaces := false,
    insert_space_after_comma_in_type_arguments := false,
    insert_space_after_comma_in_type_parameters := false,
    insert_space_after_ellipsis := false,
    insert_space_after_lambda_arrow := false,
    insert_space_after_opening_angle_bracket_in_parameterized_type_reference := false,
    insert_space_after_opening_angle_bracket_in_type_arguments := false,
    insert_space_after_opening_angle_bracket_in_type_parameters := false,
    insert_space_after_opening_bracket_in_array_allocation_expression := false,
    insert_space_after_opening_bracket_in_array_reference := false,
    insert_space_after_opening_brace_in_array_initializer := false,
    insert_space_after_opening_paren_in_annotation := false,
    insert_space_after_opening_paren_in_cast := false,
    insert_space_after_opening_paren_in_catch := false,
    insert_space_after_opening_paren_in_constructor_declaration := false,
    insert_space_after_opening_paren_in_enum_constant := false,
    insert_space_after_opening_paren_in_for := false,
    insert_space_after_opening_paren_in_if := false,
    insert_space_after_opening_paren_in_method_declaration := false,
    insert_space_after_opening_paren_in_method_invocation := false,
    insert_space_after_opening_paren_in_parenthesized_expression := false,
    insert_space_after_opening_paren_in_switch := false,
    insert_space_after_opening_paren_in_synchronized := false,
    insert_space_after_opening_paren_in_try := false,
    insert_space_after_opening_paren_in_while := false,
    insert_space_after_postfix_operator := false,
    insert_space_after_prefix_operator := false,
    insert_space_after_question_in_conditional := false,
    insert_space_after_question_in_wilcard := false,
    insert_space_after_semicolon_in_for := false,
    insert_space_after_semicolon_in_try_resources := false,
    insert_space_after_unary_operator := false,
    insert_space_before_and_in_type_parameter := false,
    insert_space_before_at_in_annotation_type_declaration := false,
    insert_space_before_assignment_operator := true,
    insert_space_before_binary_operator := false,
    insert_space_before_closing_angle_bracket_in_parameterized_type_reference := false,
    insert_space_before_closing_angle_bracket_in_type_arguments := false,
    insert_space_before_closing_angle_bracket_in_type_parameters := false,
    insert_space_before_closing_brace_in_array_initializer := false,
    insert_space_before_closing_bracket_in_array_allocation_expression := false,
    insert_space_before_closing_bracket_in_array_reference := false,
    insert_space_before_closing_paren_in_annotation := false,
    insert_space_before_closing_paren_in_cast := false,
    insert_space_before_closing_paren_in_catch := false,
    insert_space_before_closing_paren_in_constructor_declaration := false,
    insert_space_before_closing_paren_in_enum_constant := false,
    insert_space_before_closing_paren_in_for := false,
    insert_space_before_closing_paren_in_if := false,
    insert_space_before_closing_paren_in_method_declaration := false,
    insert_space_before_closing_paren_in_method_invocation := false,
    insert_space_before_closing_paren_in_parenthesized_expression := false,
    insert_space_before_closing_paren_in_switch := false,
    insert_space_before_closing_paren_in_synchronized := false,
    insert_space_before_closing_paren_in_try := false,
    insert_space_before_closing_paren_in_while := false,
    insert_space_before_colon_in_assert := false,
    insert_space_before_colon_in_case := false,
    insert_space_before_colon_in_conditional := false,
    insert_space_before_colon_in_default := false,
    insert_space_before_colon_in_for := false,
    insert_space_before_colon_in_labeled_statement := false,
    insert_space_before_comma_in_allocation_expression := false,
    insert_space_before_comma_in_annotation := false,
    insert_space_before_comma_in_array_initializer := false,
    insert_space_before_comma_in_constructor_declaration_parameters := false,
    insert_space_before_comma_in_constructor_declaration_throws := false,
    insert_space_before_comma_in_enum_constant_arguments := false,
    insert_space_before_comma_in_enum_declarations := false,
    insert_space_before_comma_in_explicit_constructor_call_arguments := false,
    insert_space_before_comma_in_for_increments := false,
    insert_space_before_comma_in_for_inits := false,
    insert_space_before_comma_in_method_invocation_arguments := false,
    insert_space_before_comma_in_method_declaration_parameters := false,
    insert_space_before_comma_in_method_declaration_throws := false,
    insert_space_before_comma_in_multiple_field_declarations := false,
    insert_space_before_comma_in_multiple_local_declarations := false,
    insert_space_before_comma_in_parameterized_type_reference := false,
    insert_space_before_comma_in_superinterfaces := false,
    insert_space_before_comma_in_type_arguments := false,
    insert_space_before_comma_in_type_parameters := false,
    insert_space_before_ellipsis := false,
    insert_space_before_lambda_arrow := true,
    insert_space_before_parenthesized_expression_in_return := false,
    insert_space_before_parenthesized_expression_in_throw := false,
    insert_space_before_question_in_wilcard := false,
    insert_space_before_opening_angle_bracket_in_parameterized_type_reference := false,
    insert_space_before_opening_angle_bracket_in_type_arguments := false,
    insert_space_before_opening_angle_bracket_in_type_parameters := false,
    insert_space_before_opening_brace_in_annotation_type_declaration := false,
    insert_space_before_opening_brace_in_anonymous_type_declaration := false,
    insert_space_before_opening_brace_in_array_initializer := true,
    insert_space_before_opening_brace_in_block := true,
    insert_space_before_opening_brace_in_constructor_declaration := false,
    insert_space_before_opening_brace_in_enum_constant := false,
    insert_space_before_opening_brace_in_enum_declaration := false,
    insert_space_before_opening_brace_in_method_declaration := false,
    insert_space_before_opening_brace_in_type_declaration := false,
    insert_space_before_opening_bracket_in_array_allocation_expression := false,
    insert_space_before_opening_bracket_in_array_reference := false,
    insert_space_before_opening_bracket_in_array_type_reference := false,
    insert_space_before_opening_paren_in_annotation := false,
    insert_space_before_opening_paren_in_annotation_type_member_declaration := false,
    insert_space_before_opening_paren_in_catch := false,
    insert_space_before_opening_paren_in_constructor_declaration := false,
    insert_space_before_opening_paren_in_enum_constant := false,
    insert_space_before_opening_paren_in_for := false,
    insert_space_before_opening_paren_in_if := false,
    insert_space_before_opening_paren_in_method_invocation := false,
    insert_space_before_opening_paren_in_method_declaration := false,
    insert_space_before_opening_paren_in_switch := false,
    insert_space_before_opening_paren_in_try := false,
    insert_space_before_opening_brace_in_switch := false,
    insert_space_before_opening_paren_in_synchronized := false,
    insert_space_before_opening_paren_in_parenthesized_expression := false,
    insert_space_before_opening_paren_in_while := false,
    insert_space_before_postfix_operator := false,
    insert_space_before_prefix_operator := false,
    insert_space_before_question_in_conditional := false,
    insert_space_before_semicolon := false,
    insert_space_before_semicolon_in_for := false,
    insert_space_before_semicolon_in_try_resources := false,
    insert_space_before_unary_operator := false,
    insert_space_between_brackets_in_array_type_reference := false,
    insert_space_between_empty_braces_in_array_initializer := false,
    insert_space_between_empty_brackets_in_array_allocation_expression := false,
    insert_space_between_empty_parens_in_annotation_type_member_declaration := false,
    insert_space_between_empty_parens_in_constructor_declaration := false,
    insert_space_between_empty_parens_in_enum_constant := false,
    insert_space_between_empty_parens_in_method_declaration := false,
    insert_space_between_empty_parens_in_method_invocation := false,
    compact_else_if := true,
    keep_guardian_clause_on_one_line := false,
    keep_else_statement_on_same_line := false,
    keep_empty_array_initializer_on_one_line := false,
    keep_simple_if_on_one_line := false,
    keep_then_statement_on_same_line := false,
    never_indent_block_comments_on_first_column := false,
    never_indent_line_comments_on_first_column := false,
    number_of_empty_lines_to_preserve := 1,
    join_wrapped_lines := false,
    join_lines_in_comments := false,
    put_empty_statement_on_new_line := false,
    tab_size := 2,
    filling_space := ' ',
    page_width := 120,
    tab_char := "space",
    use_tabs_only_for_leading_indentations := false,
    wrap_before_binary_operator := false,
    wrap_before_or_operator_multicatch := false,
    wrap_outer_expressions_when_nested := false,
    initial_indentation_level := 0,
    line_separator := "\r\n",
    tabulation_size := 2,
    tabulation_char := "space"
  )

}
